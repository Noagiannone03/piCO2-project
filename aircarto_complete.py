"""
AirCarto - D√©tecteur CO2 avec Raspberry Pico 2W
Capteur CO2 MH-Z19C + √âcran OLED SSD1309 (SPI) + WiFi + Serveur
Mise √† jour toutes les 30 secondes avec envoi de donn√©es

Connexions:
=== √âCRAN OLED SSD1309 (SPI) ===
Pin 33 (GND) ‚Üí GND
Pin 36 (3V3) ‚Üí VCC  
Pin 4 (GPIO 2) ‚Üí SCK
Pin 5 (GPIO 3) ‚Üí SDA/MOSI
Pin 3 (GPIO 1) ‚Üí RES
Pin 7 (GPIO 5) ‚Üí DC
Pin 9 (GPIO 6) ‚Üí CS

=== CAPTEUR CO2 MH-Z19C (UART) ===
Pin 39 (VSYS) ‚Üí VCC (5V)
Pin 33 (GND) ‚Üí GND (partag√©)
Pin 12 (GPIO 9) ‚Üí RX Pico (TX capteur)
Pin 11 (GPIO 8) ‚Üí TX Pico (RX capteur)
"""

from machine import Pin, SPI, UART, reset
import network
import socket
import time
import json
import urequests
import struct
import os

print("üå± === AirCarto v2.0 - WiFi Ready === üå±")

# =====================================================
# CONFIGURATION
# =====================================================
WIFI_CONFIG_FILE = "wifi_config.json"
SERVER_URL = "http://192.168.1.42:5000/api/co2"  # üîß IP du Raspberry Pi!
AP_SSID = "AirCarto-Setup"
AP_PASSWORD = "aircarto123"
MEASUREMENT_INTERVAL = 30  # secondes
RETRY_INTERVAL = 5  # secondes entre tentatives de connexion

# =====================================================
# CONFIGURATION MAT√âRIEL
# =====================================================
# √âcran OLED (SPI)
sck_pin = Pin(2)
mosi_pin = Pin(3)
dc_pin = Pin(5)
res_pin = Pin(1)
cs_pin = Pin(6)
spi = SPI(0, baudrate=1000000, polarity=0, phase=0, sck=sck_pin, mosi=mosi_pin)

# Capteur CO2 (UART)
uart = UART(1, baudrate=9600, tx=Pin(8), rx=Pin(9))

# Variables globales
oled = None
wifi_connected = False
ap_mode = False
mascot = None  # Nouvelle variable pour la mascotte

# =====================================================
# GESTION WIFI & CONFIGURATION
# =====================================================

def load_wifi_config():
    """Charge la configuration WiFi depuis le fichier"""
    try:
        with open(WIFI_CONFIG_FILE, 'r') as f:
            return json.load(f)
    except:
        return None

def save_wifi_config(ssid, password):
    """Sauvegarde la configuration WiFi"""
    config = {"ssid": ssid, "password": password}
    with open(WIFI_CONFIG_FILE, 'w') as f:
        json.dump(config, f)
    print(f"‚úÖ WiFi sauvegard√©: {ssid}")

def connect_wifi(ssid=None, password=None):
    """Tente de se connecter au WiFi"""
    global wifi_connected
    
    # Si SSID/password fournis directement, les utiliser
    if ssid and password:
        config = {"ssid": ssid, "password": password}
    else:
        # Sinon charger depuis le fichier
        config = load_wifi_config()
        if not config:
            print("‚ùå Pas de configuration WiFi")
            return False
    
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    
    print(f"üîå Connexion √† {config['ssid']}...")
    display_status("Connexion WiFi", config['ssid'])
    
    wlan.connect(config['ssid'], config['password'])
    
    # Attendre la connexion (max 15s)
    timeout = 15
    while timeout > 0 and not wlan.isconnected():
        time.sleep(1)
        timeout -= 1
        print(f"‚è≥ Tentative... {timeout}s")
        if timeout % 3 == 0:  # Mise √† jour √©cran toutes les 3s
            display_status("Connexion WiFi", f"{config['ssid']} ({timeout}s)")
    
    if wlan.isconnected():
        ip = wlan.ifconfig()[0]
        print(f"‚úÖ WiFi connect√©! IP: {ip}")
        display_status("WiFi connect√©", ip)
        wifi_connected = True
        return True
    else:
        print("‚ùå Connexion WiFi √©chou√©e")
        display_status("WiFi √©chou√©", "V√©rifiez config")
        wifi_connected = False
        return False

def start_access_point():
    """D√©marre le point d'acc√®s pour configuration"""
    global ap_mode
    
    print("üì° D√©marrage mode configuration...")
    display_status("Mode Config", "AirCarto-Setup")
    
    # Cr√©er point d'acc√®s
    ap = network.WLAN(network.AP_IF)
    ap.active(True)
    ap.config(essid=AP_SSID, password=AP_PASSWORD)
    
    while not ap.active():
        time.sleep(1)
    
    print(f"‚úÖ Point d'acc√®s cr√©√©: {AP_SSID}")
    print(f"üîë Mot de passe: {AP_PASSWORD}")
    print(f"üåê IP: {ap.ifconfig()[0]}")
    
    ap_mode = True
    return ap

def create_captive_portal():
    """Cr√©e le serveur web pour la configuration"""
    
    html_page = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AirCarto - Configuration WiFi</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 400px; margin: 50px auto; padding: 20px; background: #f0f8ff; }
            .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            h1 { color: #2c5282; text-align: center; margin-bottom: 30px; }
            .logo { text-align: center; font-size: 48px; margin-bottom: 20px; }
            input, select { width: 100%; padding: 12px; margin: 10px 0; border: 2px solid #ddd; border-radius: 5px; font-size: 16px; }
            button { width: 100%; padding: 15px; background: #4CAF50; color: white; border: none; border-radius: 5px; font-size: 18px; cursor: pointer; }
            button:hover { background: #45a049; }
            .info { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
            .step { margin: 10px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="logo">üå±</div>
            <h1>AirCarto Setup</h1>
            
            <div class="info">
                <strong>üìã Instructions:</strong>
                <div class="step">1. S√©lectionnez votre r√©seau WiFi</div>
                <div class="step">2. Entrez le mot de passe</div>
                <div class="step">3. Cliquez sur "Configurer"</div>
                <div class="step">4. AirCarto se connectera automatiquement</div>
            </div>
            
            <form action="/configure" method="POST">
                <label for="ssid"><strong>üîå R√©seau WiFi:</strong></label>
                <select name="ssid" id="ssid" required>
                    <option value="">-- S√©lectionnez un r√©seau --</option>
                    %NETWORKS%
                </select>
                
                <label for="password"><strong>üîë Mot de passe:</strong></label>
                <input type="password" name="password" id="password" placeholder="Mot de passe WiFi" required>
                
                <button type="submit">üöÄ Configurer AirCarto</button>
            </form>
        </div>
        
        <script>
            // Auto-refresh networks every 10s
            setTimeout(() => location.reload(), 10000);
        </script>
    </body>
    </html>
    """
    
    success_page = """
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AirCarto - Configur√©!</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 400px; margin: 50px auto; padding: 20px; background: #f0f8ff; text-align: center; }
            .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
            h1 { color: #4CAF50; }
            .success { font-size: 64px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="success">‚úÖ</div>
            <h1>Configuration r√©ussie!</h1>
            <p><strong>AirCarto se connecte √† votre WiFi...</strong></p>
            <p>Votre capteur va maintenant fonctionner en mode normal et commencer les mesures CO2.</p>
            <p><em>Vous pouvez fermer cette page et vous d√©connecter du r√©seau AirCarto-Setup.</em></p>
        </div>
        <script>
            setTimeout(() => window.close(), 8000);
        </script>
    </body>
    </html>
    """
    
    def scan_networks():
        """Scanne les r√©seaux WiFi disponibles"""
        try:
            wlan = network.WLAN(network.STA_IF)
            wlan.active(True)
            networks = wlan.scan()
            
            network_options = ""
            seen_ssids = set()
            
            for net in networks:
                ssid = net[0].decode('utf-8')
                if ssid and ssid not in seen_ssids:
                    signal_strength = net[3]
                    security = "üîí" if net[4] > 0 else "üîì"
                    network_options += f'<option value="{ssid}">{security} {ssid} ({signal_strength}dBm)</option>\n'
                    seen_ssids.add(ssid)
            
            return network_options
        except Exception as e:
            print(f"‚ùå Erreur scan WiFi: {e}")
            return '<option value="">Erreur scan r√©seaux</option>'
    
    # Cr√©er serveur web
    s = socket.socket()
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(('0.0.0.0', 80))
    s.listen(5)
    
    print("üåê Serveur web d√©marr√© sur http://192.168.4.1")
    display_status("Web Config", "192.168.4.1")
    
    while ap_mode:
        conn = None  # Initialiser conn √† None
        try:
            conn, addr = s.accept()
            request = conn.recv(1024).decode('utf-8')
            
            print(f"üì® Requ√™te de {addr[0]}")
            
            if "POST /configure" in request:
                # Traitement de la configuration
                lines = request.split('\n')
                data = lines[-1]  # Derni√®re ligne contient les donn√©es POST
                
                params = {}
                for param in data.split('&'):
                    if '=' in param:
                        key, value = param.split('=', 1)
                        # D√©coder les caract√®res URL
                        key = key.replace('%40', '@').replace('+', ' ')
                        value = value.replace('%40', '@').replace('+', ' ')
                        params[key] = value
                
                if 'ssid' in params and 'password' in params:
                    ssid = params['ssid']
                    password = params['password']
                    
                    print(f"üíæ Configuration re√ßue: {ssid}")
                    
                    # R√©ponse de succ√®s d'abord
                    response = f"HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n{success_page}"
                    conn.send(response.encode())
                    conn.close()
                    conn = None  # Marquer comme ferm√©
                    
                    # Sauvegarder la config
                    save_wifi_config(ssid, password)
                    
                    # Arr√™ter le serveur web et le point d'acc√®s
                    print("üîÑ Arr√™t du mode configuration...")
                    try:
                        s.close()
                    except:
                        pass
                    
                    # Arr√™ter le point d'acc√®s
                    ap = network.WLAN(network.AP_IF)
                    ap.active(False)
                    
                    # Attendre un peu
                    time.sleep(2)
                    
                    # Tenter la connexion au nouveau WiFi
                    print("üîå Connexion au nouveau WiFi...")
                    if connect_wifi(ssid, password):
                        print("‚úÖ Configuration termin√©e avec succ√®s!")
                        return True  # Succ√®s
                    else:
                        print("‚ùå √âchec de connexion, retour en mode configuration...")
                        # Red√©marrer le point d'acc√®s si √©chec
                        time.sleep(3)
                        start_access_point()
                        return create_captive_portal()  # R√©cursif
                else:
                    # Param√®tres manquants
                    error_response = "HTTP/1.1 400 Bad Request\r\nContent-Type: text/html\r\n\r\n<h1>Erreur: Param√®tres manquants</h1>"
                    conn.send(error_response.encode())
                
            else:
                # Page principale
                networks = scan_networks()
                page = html_page.replace('%NETWORKS%', networks)
                
                response = f"HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n{page}"
                conn.send(response.encode())
            
            if conn:
                conn.close()
                conn = None
            
        except Exception as e:
            print(f"‚ùå Erreur serveur: {e}")
            if conn:
                try:
                    conn.close()
                except:
                    pass
        
        # V√©rifier si on doit sortir de la boucle
        if not ap_mode:
            break
    
    # Fermer le serveur si on arrive ici
    try:
        s.close()
    except:
        pass
    
    return False  # √âchec par d√©faut

# =====================================================
# FONCTIONS CAPTEUR CO2
# =====================================================

def read_co2():
    """Lit la valeur CO2 du capteur MH-Z19C"""
    try:
        while uart.any():
            uart.read()
        
        cmd = bytearray([0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79])
        uart.write(cmd)
        time.sleep(0.2)
        
        if uart.any():
            response = uart.read()
            
            if response and len(response) >= 9:
                if response[0] == 0xFF and response[1] == 0x86:
                    co2_high = response[2]
                    co2_low = response[3] 
                    co2_ppm = co2_high * 256 + co2_low
                    return co2_ppm
        
        return None
            
    except Exception as e:
        print(f"‚ùå Erreur lecture CO2: {e}")
        return None

def get_air_quality_status(co2_ppm):
    """Retourne le statut de qualit√© de l'air"""
    if co2_ppm is None:
        return "ERREUR", "‚ùå"
    elif co2_ppm < 400:
        return "EXCELLENT", "üòä"
    elif co2_ppm < 600:
        return "BON", "üôÇ"
    elif co2_ppm < 1000:
        return "MOYEN", "üòê"
    elif co2_ppm < 1500:
        return "MAUVAIS", "üòü"
    else:
        return "DANGER", "üö®"

# =====================================================
# ENVOI DONN√âES SERVEUR
# =====================================================

def send_to_server(co2_ppm, status):
    """Envoie les donn√©es au serveur"""
    if not wifi_connected:
        return False
    
    try:
        data = {
            "device_id": "aircarto_001",  # ID unique du dispositif
            "timestamp": time.time(),
            "co2_ppm": co2_ppm,
            "air_quality": status,
            "location": "default"  # √Ä personnaliser
        }
        
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "AirCarto/2.0"
        }
        
        print(f"üì° Envoi au serveur: {co2_ppm} ppm")
        
        # ENVOI R√âEL activ√© !
        response = urequests.post(SERVER_URL, json=data, headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ Donn√©es envoy√©es!")
            response.close()  # Lib√©rer la m√©moire
            return True
        else:
            print(f"‚ùå Erreur serveur: {response.status_code}")
            response.close()
            return False
        
        # # Simulation d√©sactiv√©e
        # print("‚úÖ Donn√©es envoy√©es! (simulation)")
        # return True
        
    except Exception as e:
        print(f"‚ùå Erreur envoi: {e}")
        return False

# =====================================================
# FONCTIONS AFFICHAGE
# =====================================================

def display_status(title, subtitle=""):
    """Affiche un statut sur l'√©cran"""
    if oled:
        oled.fill(0)
        oled.text("AirCarto v2.0", 10, 0)
        oled.hline(0, 10, 128, 1)
        oled.text(title, 10, 20)
        if subtitle:
            oled.text(subtitle, 5, 35)
        oled.show()

def draw_main_display(co2_ppm, status, emoji, wifi_status, server_status):
    """Affiche l'interface principale"""
    if not oled:
        return
        
    oled.fill(0)
    
    # En-t√™te avec statuts
    oled.text("AirCarto", 35, 0)
    
    # Statuts connexion
    wifi_icon = "üì∂" if wifi_connected else "‚ùå"
    server_icon = "‚òÅÔ∏è" if server_status else "üì°"
    oled.text(f"{wifi_icon} {server_icon}", 90, 0)
    
    oled.hline(0, 10, 128, 1)
    
    # CO2 principal
    if co2_ppm is not None:
        co2_text = f"{co2_ppm} ppm"
        oled.text(co2_text, 20, 15)
        oled.text(f"Air: {status}", 10, 30)
        
        # Barre de niveau
        bar_width = min(120, int((co2_ppm / 2000) * 120))
        oled.fill_rect(4, 45, bar_width, 8, 1)
        oled.rect(4, 45, 120, 8, 1)
        
    else:
        oled.text("CAPTEUR", 30, 25)
        oled.text("ERREUR", 35, 40)
    
    # Pied de page
    oled.text(f"Up: {time.ticks_ms()//1000}s", 0, 56)
    
    oled.show()

# =====================================================
# PROGRAMME PRINCIPAL
# =====================================================

def main():
    global oled, wifi_connected, ap_mode, mascot
    
    try:
        # Initialiser l'√©cran OLED
        print("üì∫ Initialisation √©cran...")
        from ssd1306 import SSD1306_SPI
        oled = SSD1306_SPI(128, 64, spi, dc_pin, res_pin, cs_pin)
        print("‚úÖ √âcran pr√™t!")
        
        # Initialiser la mascotte
        print("üê± Initialisation mascotte...")
        try:
            from aircarto_mascot import AirCartoMascot, draw_main_display_with_mascot
            mascot = AirCartoMascot(oled)
            print("‚úÖ Mascotte pr√™te!")
            use_mascot = True
        except ImportError:
            print("‚ö†Ô∏è Mascotte non disponible, mode classique")
            use_mascot = False
        
        display_status("Demarrage...", "AirCarto v2.0")
        time.sleep(2)
        
        # Tentative de connexion WiFi
        print("üîå Tentative connexion WiFi...")
        wifi_configured = False
        
        if not connect_wifi():
            print("üì° D√©marrage mode configuration...")
            ap_mode = True  # S'assurer que ap_mode est d√©fini
            ap = start_access_point()
            wifi_configured = create_captive_portal()
            ap_mode = False  # R√©initialiser apr√®s le captive portal
            
            if not wifi_configured:
                print("‚ùå Configuration WiFi annul√©e")
                return
        else:
            wifi_configured = True
            # Animation de connexion r√©ussie
            if use_mascot and mascot:
                mascot.animate_reaction("wifi_connect")
        
        # Si on arrive ici, le WiFi est configur√©
        if wifi_configured:
            print("‚úÖ WiFi configur√©, d√©marrage du syst√®me...")
            display_status("WiFi OK", "Demarrage systeme")
            time.sleep(2)
        
        # Pr√©chauffage capteur
        print("üå°Ô∏è Pr√©chauffage capteur...")
        for i in range(6):
            display_status("Prechauffage", f"{(6-i)*5}s restantes")
            time.sleep(5)
        
        print("‚úÖ Syst√®me pr√™t!")
        
        # Boucle principale
        last_server_success = True
        last_co2_level = None
        
        while True:
            print("üìä Nouvelle mesure...")
            
            # V√©rifier connexion WiFi
            wlan = network.WLAN(network.STA_IF)
            if not wlan.isconnected():
                print("‚ùå WiFi d√©connect√©!")
                wifi_connected = False
                if use_mascot and mascot:
                    mascot.animate_reaction("wifi_error")
                # Tenter reconnexion
                if not connect_wifi():
                    time.sleep(RETRY_INTERVAL)
                    continue
            
            # Lecture CO2
            co2_ppm = read_co2()
            status, emoji = get_air_quality_status(co2_ppm)
            
            # D√©clencher animations selon les changements
            if use_mascot and mascot and co2_ppm is not None:
                if last_co2_level is None:
                    last_co2_level = co2_ppm
                elif co2_ppm > 1500 and last_co2_level <= 1500:
                    mascot.animate_reaction("co2_danger")
                last_co2_level = co2_ppm
            
            if co2_ppm is not None:
                print(f"CO2: {co2_ppm} ppm - {status}")
                
                # Envoi au serveur
                server_success = send_to_server(co2_ppm, status)
                last_server_success = server_success
            else:
                print("‚ùå Erreur lecture CO2")
                last_server_success = False
            
            # Affichage avec ou sans mascotte
            if use_mascot and mascot:
                draw_main_display_with_mascot(oled, mascot, co2_ppm, status, emoji, wifi_connected, last_server_success)
            else:
                draw_main_display(co2_ppm, status, emoji, wifi_connected, last_server_success)
            
            # Attendre prochaine mesure
            time.sleep(MEASUREMENT_INTERVAL)
            
    except ImportError:
        print("‚ùå Biblioth√®que ssd1306 manquante!")
        
    except KeyboardInterrupt:
        print("\nüõë Arr√™t utilisateur")
        
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        import sys
        sys.print_exception(e)  # Afficher la stack trace compl√®te

if __name__ == "__main__":
    main() 